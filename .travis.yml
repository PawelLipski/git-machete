os: linux
# We need Bionic aka Ubuntu 18.04 LTS since we're using destructive mode of building snaps
# and hence apparently we have to use same distro as used for core18 (https://github.com/snapcore/core18) Snap base.
dist: bionic
# Build is fully Dockerized, we don't need to run Python directly on the VM.
# Python is needed for PyPI deployment, but `minimal` is still sufficient for this purpose.
language: minimal

# CI is responsible for the tagging, so we shouldn't let it build tags.
if: tag IS blank

# The defaults used in absence of an explicit `install:` or `script:` field  (i.e. currently only for the jobs in `Tests` stage)
install: bash ci/tox/travis-install.sh
script: bash ci/tox/travis-script.sh

jobs:
  include:
    - stage: Tests
      env: PYTHON_VERSION=3.5 GIT_VERSION=1.7.10  # Earliest version of git supported by git-machete
    - env: PYTHON_VERSION=3.6 GIT_VERSION=2.7.6
    - env: PYTHON_VERSION=3.7 GIT_VERSION=2.20.2
    - env: PYTHON_VERSION=3.8 GIT_VERSION=2.25.0

    - stage: 'Perform extra checks'
      install: skip
      script:
        - ./ci/checks/links.sh
        - ./ci/checks/tab-character.sh
        - ./ci/checks/trailing-whitespace.sh

    # Note: each time a commit is pushed to master,
    # a Snap build for `edge` channel is also triggered automatically via GitHub webhook on https://build.snapcraft.io/user/VirtusLab/git-machete
    # This happens completely outside of the CI, however.
    - stage: 'Test building a snap'
      # Building a snapping is rather a heavy operation, we don't want to test it on every single build.
      if: branch = develop
      install:
        - sudo apt-get update
        - sudo apt-get install -y snapd
        - sudo snap install snapcraft --classic
      script:
        # `destructive-mode` means that build dependencies are installed directly in the system where snapcraft is launched
        # (rather than on a VM that snapcraft would spin up just for that purpose).
        # On Travis, we're on a VM anyway - so we can safely use this mode.
        # Also, see a comment to `dist: bionic`.
        - sudo -H snapcraft snap --destructive-mode
        - sudo snap install --classic --dangerous *.snap
        - git machete --version
        - git branch base HEAD~
        - git checkout -b current
        - echo base > .git/machete
        - echo ' current' >> .git/machete
        - git machete status
        - git remote -v
        - echo q | git machete traverse --fetch
        - sudo snap remove git-machete

    - stage: 'Build rpm & deploy to GitHub Releases'
      if: branch = master
      install: sudo snap install --classic hub
      script: bash ci/rpm/travis-script.sh
      deploy:
        provider: script
        skip_cleanup: true  # to retain the rpm built by travis-script.sh
        script: bash ci/github-releases/travis-deploy.sh
        on: { branch: master }

    - stage: 'Deploy to PyPI'
      if: branch = master
      install: skip
      script: skip
      deploy:
        provider: pypi
        username: __token__
        password:
          secure: U6JJcByjLv2PutUpnpqDT7cNIUYu9Ap9t4G90KULEn6Syxa49aX14BT6k2jBakWbQgrPCxLLNSWeCoC4xPl/Z2/9HLEFxZLVovtVbiaJ8HrTcoWmEZijnGob9Ofh94TFP8VtifjqHXeIrPi78XyZEks/ed0Sj3jSH4BL74PDHvqbD1RnsezFm4QGI2ESOWY+laJ2ralcpHRJh0hJb0QHxOpbKPVM+QefiFs+VFkFP25hQcn/G3qdduzW5NQ8OHBYCbevy6/1yt/M67ZzAeA0n4UrkZ/3vBsMJJ3wynWWZ3xO+lGs6eqZ31E8vicogYbw5hXs119JRkKUrcU5uqVL1mogf8N6y76w2xNV6Aul/XtpBiuPQsHm0tChwTI6yyGzAZBRPMB1KzRclDKGQThIBhpX+wfqHSpvdj1CZV5AMm3+6nHA0LSGWiuJ1BW7pTrAp9YFPbrQfH59JWMhy8ng5lexcQQj7spSO/DPw0VMIfUiw644BfSfyZwls5du4yYfWOkd8RoELEa2IGqCp1sTqjWvSuX3nzKCbJhxAwrVU5mK9fiMPcL1jURIwlFvooI+qKAp3CdGZ1IM+HFmpzXym2kvZvmrNXduVSZcqG3DrCFxt77FYsN5SNB/uly1vLq/6Y0BaCw9ao6YWfW3fvU2cCcyejjzPyfGzZ2jA5uOpZ8=
        distributions: 'sdist bdist_wheel'
        on: { branch: master }

    - stage: 'Update Homebrew tap'  # Artifacts must be released to PyPI first
      if: branch = master
      install: skip
      script: skip
      deploy:
        provider: script
        script: bash ci/homebrew-tap/travis-deploy.sh
        on: { branch: master }

    - stage: 'Build & upload deb to PPA'
      if: branch = master
      install: skip
      script: skip
      deploy:
        provider: script
        script: bash ci/deb-ppa-upload/travis-deploy.sh
        on: { branch: master }

    - stage: 'Open PR to NixOS/nixpkgs'  # Artifacts must be released to PyPI first
      if: branch = master
      install: skip
      script: skip
      deploy:
        provider: script
        script: bash ci/nixpkgs-pr/travis-deploy.sh
        on: { branch: master }


notifications:
  email:
    on_success: change
    on_failure: always
